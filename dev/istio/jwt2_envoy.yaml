apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: jwt-header-injector
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: ANY
      listener:
        portNumber: 443
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.jwt_authn"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inlineCode: |
            local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

            function dec(data)
                data = string.gsub(data, '[^'..b..'=]', '')
                return (data:gsub('.', function(x)
                    if (x == '=') then return '' end
                    local r, f = '', (b:find(x) - 1)
                    for i = 6, 1, -1 do r = r .. (f % 2^i - f % 2^(i-1) > 0 and '1' or '0') end
                    return r
                end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
                    if (#x ~= 8) then return '' end
                    local c = 0
                    for i = 1, 8 do c = c + (x:sub(i, i) == '1' and 2^(8-i) or 0) end
                    return string.char(c)
                end))
            end

            -- Простая функция для разбора JSON строки
            function parse_json(json_string)
                local json = {}
                json_string = json_string:gsub('["{}]', '')
                for pair in json_string:gmatch('[^,]+') do
                    local key, value = pair:match('([^:]+):([^:]+)')
                    if key and value then
                        key = key:match('^%s*(.-)%s*$')
                        value = value:match('^%s*(.-)%s*$')
                        json[key] = value
                    end
                end
                return json
            end

            function envoy_on_request(request_handle)
              request_handle:logInfo("111 Lua filter started")

              local headers = request_handle:headers()
              local token = headers:get("authorization")

              if token then
                request_handle:logInfo("111 token exists")
                local _, _, jwt = string.find(token, "Bearer%s+(.+)")
                if jwt then

                    request_handle:logInfo("111 jwt exists")
                    local dot_index = string.find(jwt, "%.")
                    if dot_index then
                      request_handle:logInfo("111 dot_index exists")
                      local base64url_payload = string.sub(jwt, dot_index + 1)
                      local second_dot_index = string.find(base64url_payload, "%.")
                      if second_dot_index then
                          request_handle:logInfo("111 second_dot_index exists")
                          base64url_payload = string.sub(base64url_payload, 1, second_dot_index - 1)
                      end

                      base64url_payload = base64url_payload:gsub("-", "+"):gsub("_", "/")
                      request_handle:logInfo("111 base64url_payload: " .. base64url_payload)





                      local status, payload_json = pcall(function() return dec(base64url_payload) end)
                      if status and payload_json then
                        request_handle:logInfo("11122 payload_json: " .. payload_json)



                          -- Используем функцию parse_json для разбора JSON строки
                          local status, payload = pcall(parse_json, payload_json)
                          if status and payload then
                              request_handle:logInfo("11122 payload parsed:" .. tostring(payload))
                              if type(payload) == "table" then
                                  for k, v in pairs(payload) do
                                      request_handle:logInfo("Key: " .. k .. " Value: " .. tostring(v))
                                  end
                              end
                              local service_name = payload["service"]
                              if service_name then
                                  request_handle:logInfo("Service name: " .. service_name)
                                  request_handle:headers():add("SRV", service_name)
                                  request_handle:logInfo("Service header added: " .. service_name)
                              else
                                  request_handle:logInfo("Service name not found in payload")
                              end
                          else
                              request_handle:logInfo("Error parsing payload JSON: " .. tostring(payload))
                          end








                      else
                        request_handle:logInfo("11122 error decoding base64 payload: " .. tostring(payload_json))
                      end



                    end
                end
              end

              request_handle:headers():add("debug", "finished")
            end
